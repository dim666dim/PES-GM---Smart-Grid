clear;
clc;

demand_values = [2;4;6];

max_battery = 4;
max_renewable = 4;

max_givable = max_battery + max_renewable;
max_askable = max(demand_values) + max_battery;

total_decision_units = max_givable + max_askable + 1;

price_vector = [5;10;15];
time_stamp = 4;

Q = zeros(time_stamp,total_decision_units,size(price_vector,1),total_decision_units);

no_of_iterations = 1000;

demand = 2;
price = 5;
battery = 0;
time = 1;

ren = get_renewable(time);

for main_iter = 1:no_of_iterations

    quasi_state = (battery + ren) - demand;
    state1 = max_askable + 1 + quasi_state;
    state2 = find(ismember(price_vector,price,'rows'));
    
    if state1 <= 0
    
        action_set = (state1-battery : state1) + max_askable+1;
        
    else
        
        rem_battery = max_battery - battery;
        
        action_set = (max(0,state1 - rem_battery) : state1) + max_askable+1;
        
    end
    
    if rand() < 0.6
        
        max_index = randi([min(action_set) max(action_set)]);
    else
        
        max_index = max(max(max(max(Q(time,state1,state2,action_set)))));    
        
    end
    
    action_taken = max_index - (max_askable+1);
    
    [next_demand,next_price] = get_next(demand,price);
    
    next_time = time +1 ;
    if next_time > 4
        next_time = 1;
    end
    
    next_ren = get_renewable(next_time);
    
    next_battery = max(battery+ren - action_taken - demand,0);
    
    %*******************************************************************
    
    next_quasi_state = (next_battery + next_ren) - next_demand;
    next_state1 = max_askable + 1 + next_quasi_state;
    next_state2 = find(ismember(price_vector,next_price,'rows'));
    
    if new_state1 <= 0
    
        next_action_set = (new_state1-new_battery : new_state1) + max_askable+1;
        
    else
        
        next_rem_battery = max_battery - next_battery;
        
        new_action_set = (max(0,state1 - rem_battery) : state1) + max_askable+1;
        
    end
    
    
    
    
    
    %*******************************************************************
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

end



